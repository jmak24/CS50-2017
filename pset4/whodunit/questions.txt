1. What’s stdint.h?
stdint.h gives you access to a mulititude of other integer types that have specified widths.

2. What’s the point of using uint8_t, uint32_t, int32_t, and uint16_t in a program?
These are the integer types pulled from stdint.h and are useful because they are well-defined data types.
You know to expect exactly 8 bits of unsigned variable with "uint8_t".

3. How many bytes is a BYTE, a DWORD, a LONG, and a WORD, respectively?
Remember* 1 byte = 8 bits.
1 byte, 4 bytes, 4 bytes, 2 bytes respectively. 

4. What (in ASCII, decimal, or hexadecimal) must the first two bytes of any BMP file be? Leading bytes used 
to identify file formats (with high probability) are generally called "magic numbers."
The first two bytes of a BMP file are "42 4D".

5. What’s the difference between bfSize and biSize?
bfSize: the entire size of the BMP file in bytes including BITMAPFILEHEADER (14 bytes) + BITMAPINFOHEADER (40 bytes).
biSize: number of bytes for the BITMAPINFOHEADER header file which is 40 bytes.

6. What does it mean if biHeight is negative?
biHeight is Positive: BMP file is bottom-up (bottom left corner)
biHeight is Negative: BMP file is top-down (top left corner). In addition, it cannot be compressed. biCompression must either be BI_RGB or BI_BITFIELDS.

7. What field in BITMAPINFOHEADER specifies the BMP’s color depth (i.e., bits per pixel)?
biBitCount indicates the number of bits-per-pixel

8. Why might fopen return NULL in lines 24 and 32 of copy.c?
line 24: when opening a file to read, it must be an existing .txt else it will return NULL
line 32: when opening a file to write, it will create a new file which must be type .txt 

9. Why is the third argument to fread always 1 in our code?
The block size is always 1 because we only require 1 entire file header structure to be used.
The innate size of BITMAPEFILEHEADER - 14 bytes, BITMAPINFOHEADER 40 bytes.

10. What value does line 65 of copy.c assign to padding if bi.biWidth is 3?
padding = (4 - (3 * 3)) % 4) % 4

bi.width = 3 pixels
sizeof(RGBTRIPLE) = 3 bytes
3 pixels * 3 bytes = 9 bytes. The width/scanline must be divisible by 4.
To achieve this we add 3 extra bytes of padding (9 + 3 = 12 bytes) 

11. What does fseek do?
fseek changes the offset of the file pointer.
offset refers to the number of bytes you want to change the current position of the file pointer.
Go forward with positive numbers, backward with negative numbers. 

12. What is SEEK_CUR?
3rd argument in fseek. 
SEEK_CUR changes the location of the pointer from its current location.
SEEK_END sets pointer location in relation to end of file.
SEEK_SET sets pointer location in relation to beginning of file. 