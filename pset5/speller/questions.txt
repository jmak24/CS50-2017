1. What is pneumonoultramicroscopicsilicovolcanoconiosis?
This is the maximum allowable length of a word in the dictionary (45 Characters) 

2. According to its man page, what does getrusage do?
getrusage returns measures for "who". We will be measuring RUSAGE_SELF in particular.
RUSAGE_SELF returns usage statsitics for the calling process, which is the sum of resources used by all threads in the process.

3. Per that same man page, how many members are in a variable of type struct rusage?
16 variables in total within the rusage struct. 
We will be focusing on the 2 timeval structs within the rusage struct.
struct timeval ru_utime; /* user CPU time used */
struct timeval ru_stime; /* system CPU time used */

4. Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?
By passing through before and after by reference pointer, the calculate function will not reproduce a copy of the struct on the stack.
This will reduce memory allocation processes and save space.

5. Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. In other words, convince us that you indeed understand how that function’s for loop works.

6. Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" to read whole words at a time? Put another way, what problems might arise by relying on fscanf alone?
fgetc allows us to pinpoint specific issues that a word my cause. The below issues can be detected using fgetc...
- Words with digits/numbers
- Words that contain characters other than alphabetical letters or apostrophes 
- Counting the word in real-time to see if it exceeds max length (45 chars) 

7. Why do you think we declared the parameters for check and load as const (which means "constant")?
check and load functions are not meant to modify the data it passes through. 
In our case, *word and *dictionary are the data that the function passes through.
constant ensures that the data that the pointers point to are not modified.
